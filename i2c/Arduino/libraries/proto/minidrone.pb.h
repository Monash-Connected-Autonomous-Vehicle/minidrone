/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_MINIDRONE_I2C_ARDUINO_LIBRARIES_PROTO_MINIDRONE_PB_H_INCLUDED
#define PB_MINIDRONE_I2C_ARDUINO_LIBRARIES_PROTO_MINIDRONE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _minidrone_Test {
    int32_t value;
} minidrone_Test;

typedef struct _minidrone_MinidroneMessage {
    bool has_test;
    minidrone_Test test; /* int32 value = 1; */
} minidrone_MinidroneMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define minidrone_Test_init_default              {0}
#define minidrone_MinidroneMessage_init_default  {false, minidrone_Test_init_default}
#define minidrone_Test_init_zero                 {0}
#define minidrone_MinidroneMessage_init_zero     {false, minidrone_Test_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define minidrone_Test_value_tag                 1
#define minidrone_MinidroneMessage_test_tag      1

/* Struct field encoding specification for nanopb */
#define minidrone_Test_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    value,             1)
#define minidrone_Test_CALLBACK NULL
#define minidrone_Test_DEFAULT NULL

#define minidrone_MinidroneMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  test,              1)
#define minidrone_MinidroneMessage_CALLBACK NULL
#define minidrone_MinidroneMessage_DEFAULT NULL
#define minidrone_MinidroneMessage_test_MSGTYPE minidrone_Test

extern const pb_msgdesc_t minidrone_Test_msg;
extern const pb_msgdesc_t minidrone_MinidroneMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define minidrone_Test_fields &minidrone_Test_msg
#define minidrone_MinidroneMessage_fields &minidrone_MinidroneMessage_msg

/* Maximum encoded size of messages (where known) */
#define minidrone_MinidroneMessage_size          13
#define minidrone_Test_size                      11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
